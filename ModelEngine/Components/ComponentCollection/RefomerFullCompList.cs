using System.Collections.Generic;

namespace ModelEngine
{
    public class RefomerFullCompList : SimpleCompList
    {
        public RefomerFullCompList(string name = "")
        {
            this.Name = name;
            Names = new List<string>() {"H2","C1","C2","OL2","C3","O3","IC4","NC4","C4","O4","IC5","NC5","P5","O5","5N5","22DMC4","23DMC4","MBP6","2MC5",
            "3MC5","SBP6","NC6","O6","5N6","A6","6N6","22DMC5","23DMC5","24DMC5","MBP7","2MC6","3MC6","3EC5","SBP7","NC7","O7","DMCP","ECP","5N7","A7","6N7","MBP8",
            "SBP8","O8","NC8","5N8","EB","OX","MX","PX","A8","6N8","IP9","NP9","5N9","A9","6N9","IP10","NP10","5N10","A10","6N10","IP11","NP11","5N11","A11",
            "6N11","P12","N12","A12","P13","N13","A13","P14","N14","A14"};

            double[] MW = new double[] { 2.016, 16.043, 30.07, 28.054, 44.097, 42.081, 58.123, 58.123, 58.123, 56.108, 72.15, 72.15, 72.15, 70.134, 70.134, 86.177, 86.177, 86.177, 86.177, 86.177, 86.177, 86.177, 84.161, 84.161, 78.114, 84.161, 100.204, 100.204, 100.204, 100.204, 100.204, 100.204, 100.204, 100.204, 100.204, 98.188, 98.188, 98.188, 98.188, 92.141, 98.188, 114.231, 114.231, 112.215, 114.231, 112.215, 106.167, 106.167, 106.167, 106.167, 106.167, 112.215, 128.258, 128.258, 126.242, 120.194, 126.242, 142.285, 142.285, 140.269, 132.205, 140.269, 156.312, 156.312, 154.296, 148.248, 154.296, 170.338, 168.323, 162.275, 184.365, 182.349, 176.302, 198.392, 196.376, 190.329 };
            double[] BP = new double[] { 20.39, 111.66, 184.55, 169.41, 231.11, 225.45, 261.43, 272.65, 272.65, 266.91, 300.99, 309.22, 309.21, 303.11, 322.4, 322.88, 331.13, 331.13, 333.41, 336.42, 336.42, 341.88, 319.87, 344.96, 353.24, 353.87, 352.34, 362.93, 353.64, 362.93, 363.2, 365, 366.62, 366.62, 371.58, 351.71, 361, 376.62, 360.63, 383.78, 374.08, 377.77, 389.78, 393.57, 398.83, 399.27, 409.35, 417.58, 412.27, 411.51, 411.51, 391.75, 410.75, 423.97, 427.73, 421.47, 429.9, 438.6, 447.31, 450.72, 455.29, 454.13, 467.45, 469.08, 461.14, 473.84, 465.82, 487.99, 485.08, 481.13, 507.27, 497.7, 511.59, 525.49, 519.41, 529.49 };
            double[] Tcrit = new double[] { 33.18, 190.58, 305.42, 282.36, 369.82, 365.57, 408.14, 425.18, 425.18, 419.59, 460.43, 469.65, 469.65, 464.78, 511.76, 489, 500, 499.98, 497.7, 504.6, 497.5, 507.43, 504.03, 532.79, 562.16, 553.54, 520.5, 537.3, 519.8, 537.35, 530.4, 535.2, 540.6, 530.37, 540.26, 537.29, 547, 569.5, 551, 591.79, 572.19, 563.4, 559.64, 566.6, 568.83, 603, 617.17, 630.37, 617.05, 616.26, 617.05, 591.15, 590.15, 595.65, 639.15, 631.15, 639.15, 618.45, 618.45, 667, 660.55, 667, 638.76, 638.76, 638, 672.9, 638, 658.2, 657, 689, 675.8, 675, 705.44, 692.4, 692, 720.07 };
            double[] Pcrit = new double[] { 12.3557, 45.9179, 48.7302, 50.2769, 42.2971, 46.5367, 36.1663, 37.6849, 37.6849, 39.9558, 33.4454, 33.3189, 33.3189, 34.95, 44.8774, 30.578, 31.0878, 30.8511, 29.9661, 30.7819, 29.6629, 29.684, 30.986, 37.5584, 48.913, 40.5183, 27.2129, 28.6405, 26.907, 28.6205, 26.907, 27.6208, 28.4366, 26.8434, 26.8647, 27.8248, 34.096, 33.6371, 34.0961, 40.8629, 34.3652, 25.7854, 24.3016, 24.9696, 24.3195, 29.5584, 35.7726, 37.0451, 35.0766, 34.7672, 35.0766, 28.9305, 22.8344, 22.4774, 27.5872, 31.6877, 27.5872, 20.6144, 20.6144, 25.1736, 28.4035, 25.1736, 19.0114, 19.0114, 19.6671, 25.5203, 19.6671, 17.5649, 18.2395, 23.9499, 16.5317, 17.0158, 20.8693, 15.4985, 15.8941, 19.2807 };
            double[] Vcrit = new double[] { 0.0641, 0.0992, 0.1479, 0.1291, 0.2029, 0.1884, 0.2627, 0.2549, 0.2549, 0.2399, 0.3058, 0.3123, 0.3123, 0.296, 0.2583, 0.358, 0.361, 0.3578, 0.368, 0.368, 0.3664, 0.3699, 0.354, 0.3189, 0.2589, 0.3079, 0.416, 0.393, 0.418, 0.393, 0.421, 0.404, 0.416, 0.421, 0.4319, 0.413, 0.36, 0.375, 0.36, 0.3158, 0.368, 0.4682, 0.488, 0.472, 0.492, 0.425, 0.3738, 0.3692, 0.3758, 0.3791, 0.3758, 0.45, 0.529, 0.5477, 0.477, 0.4277, 0.477, 0.6031, 0.6031, 0.534, 0.497, 0.534, 0.657, 0.657, 0.642, 0.55, 0.642, 0.7268, 0.7, 0.598, 0.77, 0.756, 0.6643, 0.8428, 0.817, 0.7209 };
            double[] AcentricFactor = new double[] { -0.215, 0.0108, 0.099, 0.0852, 0.1518, 0.1398, 0.177, 0.1993, 0.1993, 0.1867, 0.2275, 0.2486, 0.2486, 0.233, 0.1943, 0.2341, 0.2493, 0.2475, 0.2791, 0.2702, 0.2781, 0.3046, 0.28, 0.2302, 0.2108, 0.2118, 0.2871, 0.2964, 0.3022, 0.2923, 0.328, 0.3204, 0.3091, 0.3282, 0.3511, 0.331, 0.2724, 0.2701, 0.2743, 0.2641, 0.235, 0.3472, 0.3769, 0.3747, 0.3962, 0.2719, 0.3036, 0.3127, 0.326, 0.3259, 0.326, 0.2326, 0.4125, 0.4377, 0.2595, 0.3377, 0.2595, 0.4842, 0.4842, 0.2743, 0.3917, 0.2743, 0.5362, 0.5362, 0.5171, 0.4915, 0.5171, 0.5734, 0.5636, 0.39, 0.6186, 0.6117, 0.5676, 0.6617, 0.6482, 0.6126 };
            double[] Density = new double[] { 70.51, 424.25, 355.18, 570.02, 508, 518.9, 564.08, 584.23, 584.23, 600.18, 626.12, 631.02, 631.02, 645.29, 759.88, 652.26, 664.6, 666.68, 656.11, 667.16, 657.41, 665.08, 676.59, 753.57, 882.63, 781.87, 676.45, 697.76, 675.49, 699.01, 681.26, 689.91, 700.96, 681.87, 689.83, 701.15, 757.34, 769.2, 749.17, 873.86, 774.39, 715.83, 703.3, 718.97, 706.25, 780.65, 873.95, 884.44, 868.92, 866, 868.92, 784.94, 724.11, 722.78, 797.72, 867.99, 797.72, 735.68, 735.68, 802.92, 852.51, 802.92, 744.1, 744.1, 753.7, 861.99, 753.7, 751.89, 762.57, 860.17, 761.33, 769.41, 859.47, 762.71, 774.45, 858.68 };
            double[] RON = new double[] { 130, 120, 111.378, 100, 112.135, 102.54, 101.426, 93.8, 93.8, 97.4, 92.3, 61.7, 61.7, 87.9, 101.426, 91.8, 100, 100, 73.4, 74.5, 74.5, 24.8, 76.4, 91.3, 106, 83, 92.8, 91.1, 83.1, 91.1, 42.4, 52, 65, 65, 0, 54.5, 92.3, 67.2, 92.3, 120.083, 74.8, 76.3, 21.7, 28.7, 0, 81.1, 107.4, 102, 117.5, 116.4, 116.4, 80.9, 84, 0, 33.4, 113.3232, 70.1, 86.4, 0, 33.4, 110.3232, 70.1, 86.4, 0, 33.4, 110.3232, 70.1, 86.4, 33.4, 110.3232, 86.4, 33.4, 110.3232, 86.4, 33.4, 110.3232 };
            double[] MON = new double[] { double.NaN, double.NaN, 100.789, 75.6, 97.1, 84.9, 97.6, 89.6, 89.6, 80.8, 90.3, 62.6, 62.6, 77.1, 84.9, 93.4, 94.3, 94.3, 73.5, 74.3, 74.3, 26, 63.4, 80, 101, 77.2, 95.6, 88.5, 83.8, 88.5, 46.4, 55.8, 69.3, 69.3, 0, 50.7, 89.3, 61.2, 89.3, 103.524, 71.1, 81.7, 23.8, 34.7, 0, 86.2, 97.9, 100, 115, 109.6, 109.6, 78.7, 91.6, 0, 28.2, 98, 74.3, 100, 0, 28.2, 92, 74.3, 100, 0, 28.2, 92, 74.3, 100, 28.2, 92, 100, 28.2, 92, 100, 28.2, 92 };
            double[] HFORM = new double[] { 0, -74850, -83850, 52283.3, -104680, 19710, -134180, -125650, -125650, -540, -152970, -146710, -146710, -20920, -77027.4, -184680, -176800, -176800, -174550, -172000, -174550, -166940, -41672.6, -106692, 82926.9, -123135, -205810, -194100, -201670, -194100, -194600, -191300, -189330, -194720, -187650, -62299.8, -138280, -126900, -135850, 49998.8, -154766, -213800, -215350, -82926.9, -208820, -148072, 29790.1, 18995.3, 17238.1, 18030, 17238.1, -181000, -233700, -228865, -193301, 3933, -193301, -249534, -249534, -213175, -13140, -213175, -270286, -270286, -145300, -33810, -145300, -290872, -165420, -77600, -311499, -186640, -86590, -332041.9, -207310, -86590 };
            double[] Sol = new double[] { 5, 5, 0, 5, 0, 0, 0, 0, 6.64, 0, 0, 0, 7.05, 7.11, 0, 0, 0, 7.09, 0, 0, 7.16, 0, 7.35, 0, 0, 0, 0, 0, 0, 7.33, 0, 0, 0, 7.41, 0, 7.5, 0, 0, 7.63, 0, 0, 7.4, 7.36, 7.57, 0, 8.01, 0, 0, 0, 0, 8.74, 7.82, 7.47, 0, 8.03, 8.48, 8.03, 7.59, 0, 8.02, 8.5, 8.02, 7.59, 0, 7.64, 8.4, 7.64, 7.58, 7.64, 8.09, 7.58, 7.63, 8.18, 7.55, 7.61, 8.11 };
            double[] SG = new double[] { 0.07051, 0.42425, 0.35518, 0.57002, 0.508, 0.5189, 0.56408, 0.58423, 0.58423, 0.60018, 0.62612, 0.63102, 0.63102, 0.64529, 0.75988, 0.65226, 0.6646, 0.66668, 0.65611, 0.66716, 0.65741, 0.66508, 0.67659, 0.75357, 0.88263, 0.78187, 0.67645, 0.69776, 0.67549, 0.69901, 0.68126, 0.68991, 0.70096, 0.68187, 0.68983, 0.70115, 0.75734, 0.7692, 0.74917, 0.87386, 0.77439, 0.71583, 0.7033, 0.71897, 0.70625, 0.78065, 0.87395, 0.88444, 0.86892, 0.866, 0.86892, 0.78494, 0.72411, 0.72278, 0.79772, 0.86799, 0.79772, 0.73568, 0.73568, 0.80292, 0.85251, 0.80292, 0.7441, 0.7441, 0.7537, 0.86199, 0.7537, 0.75189, 0.76257, 0.86017, 0.76133, 0.76941, 0.85947, 0.76271, 0.77445, 0.85868 };

            Components.Clear();

            for (int i = 0; i < Names.Count; i++)
            {
                Components.Add(new PseudoComponent(Names[i], BP[i], SG[i], MW[i], AcentricFactor[i], Tcrit[i], Pcrit[i], Vcrit[i], HFORM[i]));
            }
        }

        public RefomerKineticLumpList Clone()
        {
            RefomerKineticLumpList res = new RefomerKineticLumpList();
            for (int i = 0; i < Components.Count; i++)
            {
                res.Components[i].MoleFraction = Components[i].MoleFraction;
            }
            return res;
        }

        public void Normalise()
        {
            double Sum = 0;
            for (int i = 0; i < Components.Count; i++)
            {
                Sum += Components[i].MoleFraction;
            }

            for (int i = 0; i < Components.Count; i++)
            {
                Components[i].MoleFraction /= Sum;
            }
        }
    }
}